<%@ val dictionary:     String  %>
<%@ val regions: String %>
<%@ val readsExist:     Boolean %>
<%@ val variantsExist:  Boolean %>
<%@ val featuresExist:  Boolean %>
<%@ val readsSamples:   Option[List[String]] %>
<%@ val variantsPaths:  Option[List[String]] %>



<html xmlns="http://www.w3.org/1999/html">
<% render("templates/head.ssp") %>
<% render("navigation/navigation.ssp", Map("isOverall" -> true)) %>
<% render("templates/sidebar.ssp") %>

<div id="main">
    <div id="pileup"></div>
</div>



<script src="js/utilities.js"></script>
<script src="js/formSubmit.js"></script>
<script src="js/overall.js"></script>
<script src="js/reference.js"></script>

<script>
    <!-- Define Global Variables -->
    var readsExist = ${readsExist};
    var variantsExist = ${variantsExist};
    var featuresExist = ${featuresExist};
    refVis("${dictionary}");
    toggleContent(false);

</script>

<script>
// TODO: make function in pileup to fetch SequenceDictionary
var request = "/sequenceDictionary"
var xhr = new XMLHttpRequest();
xhr.open('GET', request, true);
xhr.send();

xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
        var contigList = JSON.parse(xhr.response);
        var p = pileup.create(document.getElementById('pileup'), {
            // go to one of the chromosomes in sequence dictionary
            range: {contig: 'chrM', start: 0, stop: 100},
            tracks: [
                {
                    viz: pileup.viz.genome(),
                    isReference: true,
                    data: pileup.formats.reference({
                        url: '/reference',
                        contigList: contigList
                    }),
                    name: 'Reference'
                },
                #if (variantsExist)
                    #for (s <- variantsPaths.get)
                        {
                        viz: pileup.viz.variants(),
                        data: pileup.formats.variants({
                            url: '/variants',
                            key: '${s}'
                        }),
                        name: 'Variants'
                        },
                    #end
                #end
                #if (readsExist)
                    #for (s <- readsSamples.get)
                        {
                        viz: pileup.viz.coverage(),
                        isReference: false,
                            data: pileup.formats.ga4gh({
                            endpoint: '/GA4GHreads',
                            readGroupId: '${s}',
                            killChr: false
                        }),
                        name: 'Coverage'
                        },
                        {
                        viz: pileup.viz.pileup(),
                        isReference: false,
                        data: pileup.formats.ga4gh({
                            endpoint: '/GA4GHreads',
                            readGroupId: '${s}',
                            killChr: false
                        }),
                        name: 'Alignment'
                        },
                    #end
                #end
            ]
        });

    }
};


</script>

</html>
