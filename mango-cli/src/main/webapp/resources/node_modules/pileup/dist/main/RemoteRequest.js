/**
 * RemoteFile is a representation of a file on a remote server which can be
 * fetched in chunks, e.g. using a Range request.
 * 
 */
'use strict';var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}var _q = require(

'q');var _q2 = _interopRequireDefault(_q);




// TODO: generalize to Any


// Define transition from json to object in
function stringToBuffer(str) {
  var buf = new ArrayBuffer(str.length); // 1 byte for each char
  var bufView = new Uint8Array(buf);
  for (var i = 0, strLen = str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i);}

  return buf;}var 


RemoteRequest = (function () {


  // track this for debugging/testing

  function RemoteRequest(url) {_classCallCheck(this, RemoteRequest);
    this.url = url;
    this.chunks = [];
    this.numNetworkRequests = 0;}_createClass(RemoteRequest, [{ key: 'get', value: 


    function get(contig, start, stop) {
      var length = stop - start;
      if (length <= 0) {
        return _q2['default'].reject('Requested <0 bytes (' + length + ') from ' + this.url);}


      // First check the cache.
      var buf = this.getFromCache(start, stop);
      if (buf) {
        return _q2['default'].when(buf);}


      // Need to fetch from the network.
      return this.getFromNetwork(contig, start, stop);} }, { key: 'getFromCache', value: 


    function getFromCache(start, stop) {
      for (var i = 0; i < this.chunks.length; i++) {
        var chunk = this.chunks[i];
        if (chunk.start <= start && chunk.stop >= stop) {
          return chunk.buffer.slice(start - chunk.start, stop - chunk.start + 1);}}


      return null;}


    /**
     * Request must be of form "url/contig?start=start&end=stop"
    */ }, { key: 'getFromNetwork', value: 
    function getFromNetwork(contig, start, stop) {var _this = this;
      var length = stop - start;
      if (length > 50000000) {
        throw 'Monster request: Won\'t fetch ' + length + ' bytes from ' + this.url;}


      var xhr = new XMLHttpRequest();
      var endpoint = this.url + "/" + contig + "?start=" + start + "&end=" + stop;
      xhr.open('GET', endpoint);
      xhr.responseType = 'json';
      xhr.setRequestHeader('Content-Type', 'application/json');

      return this.promiseXHR(xhr).then(function (json) {
        // extract response from promise
        var response = json[0];
        var buffer = stringToBuffer(response);
        // The actual length of the response may be less than requested if it's
        // too short, e.g. if we request bytes 0-1000 of a 500-byte file.
        var newChunk = { start: start, stop: stop, buffer: buffer };
        _this.chunks.push(newChunk);
        return buffer;});}



    // Wrapper to convert XHRs to Promises.
    // The promised values are the response (e.g. an ArrayBuffer) and the Event.
  }, { key: 'promiseXHR', value: function promiseXHR(xhr) {
      var url = this.url;
      var deferred = _q2['default'].defer();
      xhr.addEventListener('load', function (e) {
        if (this.status >= 400) {
          deferred.reject('Request for ' + url + ' failed with status: ' + this.status + ' ' + this.statusText);} else 
        {
          deferred.resolve([this.response, e]);}});


      xhr.addEventListener('error', function (e) {
        deferred.reject('Request for ' + url + ' failed with status: ' + this.status + ' ' + this.statusText);});

      this.numNetworkRequests++;
      xhr.send();
      return deferred.promise;}


    // Attempting to access Content-Range directly may raise security errors.
    // This ensures the access is safe before making it.
  }, { key: '_getLengthFromContentRange', value: function _getLengthFromContentRange(xhr) {
      if (!/Content-Range/i.exec(xhr.getAllResponseHeaders())) {
        return null;}


      var contentRange = xhr.getResponseHeader('Content-Range');
      var m = /\/(\d+)$/.exec(contentRange);
      if (m) {
        return Number(m[1]);}

      console.warn('Received improper Content-Range value for ' + (
      this.url + ': ' + contentRange));
      return null;} }, { key: 'clearCache', value: 


    function clearCache() {
      this.chunks = [];} }]);return RemoteRequest;})();



module.exports = RemoteRequest; // regions of file that have already been loaded.